<resources>
    <string name="app_name">Aepp</string>
    <string name="initial_score">Score 0/13</string>
    <string name="taksinomhsh">Αλγόριθμος Φυσαλίδα \n Δεδομένα //table   \n // Για i από 2 μέχρι n  \n   Για j από n μέχρι i με_βήμα -1        \n Αν table[j-1] &lt; table[j] τότε    \n       temp $lt;--table[j-1]    \n table[j-1]$lt;--table[j] \n table[j]$lt;--temp     Τέλος_αν     Τέλος_επανάληψης Τέλος_επανάληψης Αποτελέσματα // table // Τέλος Φυσαλίδα</string>

    <string name="incorrect_toast">Λάθος απάντηση!</string>
    <string name="correct_toast">Πολύ σωστά!</string>
    <string name="true_button">Σωστό</string>
    <string name="false_button">Λάθος</string>
    <string name="eisagwgiko">Εισαγωγή στο κόσμο της Πληροφορικής</string>
    <string name="eisagwgiko2"><b>  Α</b>(ρχές)\n <b>Ε</b>(κπαίδευσης) \n <b>Π</b>(ετυχημένου) \n <b>Π</b>(ρογραμματιστή)</string>
    <string name="eisagwgiko3">Let \'s Start! </string>
    <string name="logo">Γίνε expert στον Προγραμματισμό!</string>
    <string name="prwtokefalaio">Ανάλυση Προβλήματος</string>
    <string name="thewria">Θεωρία</string>
    <string name="methodologia">Μεθοδολογία</string>
    <string name="askiseis">Ασκήσεις</string>
    <string name="krithrialgorithmou">Τα πέντε κριτήρια που πρέπει να ικανοποιεί ένας αλγόριθμος είναι: \n • <b>Είσοδος</b> Να έχει δεδομένα εισόδου που θα επεξεργαστεί (μηδέν ή περισσότερα.Αν δεν υπάρχουν είσοδοι ο υπολογιστής γεννά μόνος του τυχαίους αριθμούς). \n <b>Αποτελεσματικότητα :</b> Κάθε εντολή πρέπει να είναι απλή.Δηλαδή δεν αρεκί μόνο να έχει ορισθεί αλλα πρεπει να ειναι και εκτελέσιμη. \n <b>Καθοριστικότητα :</b>Κάθε εντολή πρέπει να ορίζεται χωρίς αμφιβολία ως προς τον τρόπο εκτέλεσή της π.χ η διαίρεση με το μηδεν παραβιαζει αυτό το κριτήριο. \n <b>Περατότητα :</b> Ένας αλγόριθμος θα πρέπει να ολοκληρώνεται μετά απο πεπερασμένο αριθμό βημάτων \n <b>Έξοδος :</b> Το αποτέλεσμα του αλγορίθμου(τουλάχιστον ένα) /n Επίσης σημειώνεται πως μια διαδικάσια η οποια δεν τελείωνει μετα απο εναν συγκεκριμένο αριθμό βήματων <b>δεν</b> είναι αλγόριθμος και ονομάζεται <b>υπολογιστική διαδικασία.</b></string>
    <string name="provlhma"><b>Πρόβλημα:</b> είναι μια κατάσταση η οποία χρήζει αντιμετώπισης απαιτεί λύση,η δε λύση δεν είναι ούτε γνώστη ούτε προφανής.</string>
    <string name="antimetwpishprovlhmatos">Για την αντιμετώπιση ενος προβλήματος πρέπει προηγουμένως να έχει προηγηθεί η <b>κατανόηση</b> του η οποία αποτελέι συνάρτηση τριών παραγόντων:  \n •Σωστή διατύπωση εκ μέρους του δημιουργόυ του. \n •Σωστή ερμηνεία απο αυτόν που θα το επιλύσει \n • Aποσαφίνηση του χώρου στον οποίο αναφέρεται.(παρέχεται απο την εκφώνηση του προβλήματος</string>
    <string name="stadiaantimetwpishs">Τα στάδια <b> αντιμετώπισης</b> ενός προβλήματος είναι τρία: \n •<b>Kατανόηση</b>:Σωστή και πλήρης αποσαφήνιση των δεδομένων και ζητουμένων ενός προβλήματος \n<b>Ανάλυση: </b> Το αρχικό πρόβλημα διασπάται σε άλλα επιμέρους προβλήματα. \n <b>Επίλυση: </b> λύση του προβλήματος με την επίλυση όλων των απλούστερων προβλημάτων. </string>
    <string name="apanthsh16">Με κριτήριο την <b>δυνατότητα επίλυσης</b> ενός προβλήματος υπάρχουν οι εξής κατηγορίες: \n  •<b>Επιλύσιμα. </b> Τα προβλήματα που η λύση τους ειναι γνώστη και έχει διατυπωθεί η ειναι γνωστή η συνάφεια τους με ήδη επιλύσιμα προβλημάτα πράγμα που επιτρέπει να θεωρόυμε βέβαιη την δυνατότητα επίλυσης τους.Π.χ Δευτεροβάθμια εξίσωση. \n •<b>Ανοικτά </b> Η λύση τους δεν έχει ακόμα βρεθεί,αλλα δεν έχει αποδειχθέι οτι δεν λύνονται.π.χ Κυκλοφορικό πρόβλημα. \n •<b>Άλυτα. </b>Εχει αποδειχθεί οτι δεν επιλύονται. π.χ Τετραγωνισμός κύκλου.  </string>
    <string name="apanthsh17">Με κριτήριο τον <b>βαθμό δόμησης της λύσης</b> ενός προβλήματος τα επιύσιμα χωρίζονται σε: \n  •<b>Δομημένα. </b> Η λύση τους προέρχεται απο μια αυτοματοποιθημένη διαδικασία. π.χ δευτεροβάθμια εξίσωση. \n •<b>Ημιδομημένα </b> Η λύση τους επιδιώκεται στα πλαίσια ενος εύρους πιθανών λύσεων αφήνοντας στον ανθρώπινο παράγοντα περιθώρια επιλογής της. π.χ επιλογή μεταφορικού μέσου \n •<b>Αδόμητα. </b>Οι λύσεις τους δεν μπορούν να δομηθούν η δεν εχει διερευνηθεί σε βάθος η δυνατότητα δόμησής τους Ο ανθρώπινος παράγοντας παίζει τον κυρίαρχο ρόλο σην επίλυση τους. π.χ Οργάνωση ενός παρτύ.  </string>
    <string name="apanthsh18">Με κριτήριο το <b>είδος επίλυσης </b> ενός προβλήματος τα προβλήματα χωρίζονται σε : \n  •<b>Απόφασης. </b> Η λύση είναι μια απόφαση συνήθως σε μια ερώτηςη ναι/οχι. π.χ διεξαγωγή μαθήματος. \n •<b>Υπολογιστικά </b> Η λύση τους απαιτεί τη διενέργεια υπολογισμών.Σε ενα τέτοιο πρόβλημα ζητάμε να βρούμε την τιμή της απάντησης που ικανοποιεί τα δεδομένα που παρέχει το πρόβλημα π.χ δευτεροβάθμια εξίσωση. \n •<b>Βελτιστοποίησης. </b>Το πρόβλημα επιζητά το βέλτιστο αποτέλεσμα για συγκεκριμένο σύνολο δεδομένων.Αναζητούμε δηλαδή την απάντηση που ικανοποιεί κατα τον καλύτερο τρόπο τα δεδομένα που παρέχει το πρόβλημα. π.χ μεγιστο/ελάχιστο συνάρτησης. </string>
    <string name="apanthsh19">Οι υπολογιστές δεν έχουν τις δυνατότητες του ανθρώπινου εγκεφάλου (ποσοτικα καλύτερος ειναι ο υπολογιστής ποιοτικα ο ανθρωπος). Σε αυτούς αναθέτουμε την επίλυση προβλημάτων λόγω \n •Πολυπλοκότητας υπολογισμων. \n •Eπαναληπτικότητας διαδικασιών. \n •Ταχύτητας πράξεων. \n • Μεγάλου πλήθους δεδομένων. </string>
    <string name="apanthsh20">ο υπολογοιστής μπορεί να πραγματοποιήσει τις εξής <b>τρεις λειτουργίες</b>: \n  •Πρόσθεση \n  •Σύγκριση(λογικές πράξεις). \n  • Μεταφορά δεδομένων(προηγείται και έπεται της επεξεργασίας των δεδομένων). </string>
    <string name="erwthsh1d1">Σε ενα πρόβλημα η λύση του μπορει ναι ειναι γνωστή η προφανής</string>
    <string name="erwthsh2d1">Για να αντιμετώπιστει ενα προβλημα πρεπει προηγουμένως να έχει προηγηθεί η κατανόηση του.</string>
    <string name="erwthsh3d1">O μονος τρόπος που μπορούμε να αναπαραστήσουμε ενα πρόβλημα ειναι διαγραμματικά</string>
    <string name="erwthsh4d1">Πληροφορία ειναι οποιοδήποτε γνωσιακό στοιχείο προέρτχεται απο την επεξεργασία δεδομένων.</string>
    <string name="erwthsh5d1">Μια απο τις προυποθέσεις για την σωστή επίλυση ενός προβλήματος ειναι ο επακριβής προσδιορισμός των δεδομένων που παρέχει το προβλημα.</string>
    <string name="erwthsh6d1">Τα στάδια αντιμετώπισης ενός προβλήματος ειναι η κατανόηση και η επίλυση.</string>
    <string name="erwthsh7d1">Ανοικτά ονομάζονται τα προβλήματα για τα οποία εχει αποδειχθεί οτι δεν υπάρχει λύση.</string>
    <string name="erwthsh8d1">Τα προβλήματα χωρίζονται με βάση τη δυνατότητα επίλυσης τους σε επιλύσιμα, ανοιχτά και άλυτα.</string>
    <string name="erwthsh9d1">Δομημένα ονομαζονται τα προβλήματα που η λύση τους προέρχεται απο μια αυτοματοποιημένη διαδικασία</string>
    <string name="erwthsh10d1">Aδόμητα ονομάζονται τα προβλήματα που η λύση τους επιδιώκεται στα πλαίσια ενος εύρους πιθανών λύσεων</string>
    <string name="erwthsh11d1">Τα προβλήματα με βάση τον βαθμό δόμησης των λύσεων τους χωρίζονται σε απόφασης,υπολογιστικά και βελτιστοποιησης.</string>
    <string name="erwthsh12d1">Ενας απο τους λόγους που αναθέτουμε στον υπολογιστή την επίλυση προβλημάτων ειναι η ταχύτητα εκτέλεσης πράξεων.</string>

    <string name="erwthsh13d1">ο υπολογιστης μπορεί να πραγματοποιήσει μόνο τις εξής 2 λειτουργίες:πρόσθεση και σύγκριση</string>
    <string name="apanthsh">Αρχικά για να μπορέσει ο υπολογιστής να εκτελέσει μία οποιαδήποτε λειτουργία, έπρεπε να δοθούν κατευθείαν οι κατάλληλες ακολουθίες από 0 και 1, δηλαδή εντολές σε μορφή κατανοητή από τον υπολογιστή αλλά ακατανόητες από τον άνθρωπο. Ο τρόπος αυτός ήταν επίπονος και ελάχιστοι μπορούσαν να τον υλοποιήσουν, αφού απαιτούσε βαθιά γνώση του υλικού και της αρχιτεκτονικής του υπολογιστή.

Ο πρώτος υπολογιστής ο περίφημος ENIAC για να προγραμματιστεί, ώστε να εκτελέσει κάποιους υπολογισμούς, έπρεπε να αλλάξουν θέση εκατοντάδες διακόπτες και να ρυθμιστούν αντίστοιχα όλες οι καλωδιώσεις, διαδικασία εξαιρετικά επίπονη και χρονοβόρα. Ο προγραμματισμός των πρώτων αυτών υπολογιστών, δεν ήταν ουσιαστικά προγραμματισμός με τη σημερινή έννοια του όρου. Ο υπολογιστής αναδιαρθρωνόταν, ώστε να εκτελέσει τους απαιτούμενους υπολογισμούς και στη συνέχεια έπρεπε να αλλάξει πάλι η διάρθρωσή του, ώστε να εκτελέσει έναν άλλο υπολογισμό.

Οι εντολές ενός προγράμματος και σήμερα μετατρέπονται σε ακολουθίες που αποτελούνται από 0 και 1, τις εντολές σε γλώσσα μηχανής, όπως ονομάζονται, οι οποίες εκτελούνται από τον υπολογιστή.Από τα πρώτα χρόνια άρχισαν να γίνονται προσπάθειες για τη δημιουργία μίας συμβολικής γλώσσας, η οποία ενώ θα έχει έννοια για τον άνθρωπο, θα μετατρέπεται εσωτερικά από τους υπολογιστές στις αντίστοιχες ακολουθίες από 0 και 1. Για παράδειγμα η λέξη ADD (πρόσθεσε) ακολουθούμενη από δύο αριθμούς, είναι κατανοητή από τον άνθρωπο και απομνημονεύεται σχετικά εύκολα. Η εντολή αυτή θα μεταφραστεί από τον υπολογιστή σε μία ακολουθία δυαδικών ψηφίων και στη συνέχεια μπορεί να εκτελεστεί. Το έργο της μετάφρασης το αναλαμβάνει ένα ειδικό πρόγραμμα, ο συμβολομεταφραστής (assembler).

Η χρήση των πρώτων αυτών συμβολικών γλωσσών, που συνεχίζουν να χρησιμοποιούνται για ειδικούς σκοπούς, ήταν σαφώς μια εξέλιξη από τις ακατανοητές ακολουθίες δυαδικών στοιχείων. Ωστόσο παρέμεναν στενά συνδεδεμένες με την αρχιτεκτονική του κάθε υπολογιστή. Επίσης δεν διέθεταν εντολές πιο σύνθετων λειτουργιών οδηγώντας έτσι σε μακροσκελή προγράμματα, που ήταν δύσκολο να γραφούν και κύρια να συντηρηθούν. Ακόμη τα προγράμματα δεν μπορούν να μεταφερθούν σε άλλον διαφορετικό υπολογιστή, ακόμη και του ίδιου κατασκευαστή. Οι γλώσσες αυτές ονομάζονται συμβολικές ή γλώσσες χαμηλού επιπέδου, αφού εξαρτώνται από την αρχιτεκτονική του υπολογιστή."
    </string>

    <string-array name="myennoies">
        <item>Πρόβλημα</item>
        <item>Άλυτα</item>
        <item>Επιλύσιμα</item>
        <item>Ανοικτά</item>
        <item>Απόφασης</item>
        <item>Βελτιστοποίησης</item>


    </string-array>
    <string name="title_activity_search">SearchActivity</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
</resources>
